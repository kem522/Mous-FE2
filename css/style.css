body {
  font-family: "Roboto", sans-serif;
  margin: 0;
}

h1 {
  font-size: 1rem;
}

h2 {
  font-size: 1.1rem;
  font-weight: 100;
}

button {
  background-color: #000;
  border: 0;
  border-radius: 40px;
  -webkit-box-shadow: none;
          box-shadow: none;
  color: #fff;
  padding: 8px;
  text-decoration: none;
}

img {
  width: 100px;
}

select {
  border-radius: 40px;
  /* Increased the right hand panding to make space for the arrow using the padding shorthand */
  /* https://developer.mozilla.org/en-US/docs/Web/CSS/padding */
  padding: 4px 25px 4px 4px;
  /* It's better not to strict with on elements with text in them, you want them to be able to flex to the size of the text, use padding to add any extra space */
  /* width: 125px; */ 
  -webkit-appearance: none;
  position: relative;
  /* Made transparent so you can see the arrow through it */
  background: transparent;
}

.device__select {
  position: relative;
  display: inline-block;
}

/* You can use psuedo elements to add extra content. In this case, I added a before to the div surrounding the select. I used a before because that
places it "underneath" the element. Placing it on top of the element using an after meant that if I clicked on the arrow that click event didn't bubble down 
to the actual select and nothing happened. With it underneath, I can make the background of the select element transparent so you can see the arrow but when you click
where the arrow is the dropdown still works. Have a play around with after & before and changing the background of the select element to see what I mean! */
/* You can read more here https://css-tricks.com/pseudo-class-selectors/ */
.device__select::before {
  content: "";
  background-image: url('../img/dropdown.png');
  background-size: contain;
  height: 25px;
  width: 25px;
  position: absolute;
  top: 0;
  right: -1px;
  display: inline-block;
}

/* Moved dropdown arrow to a pseudo element, see above */
/* .custom-arrow img {
  width: 33px;
  height: 33px;
  position: relative;
  top: 12px;
  right: 25px;
} */

.device {
  border: 1px solid #000;
  -webkit-box-shadow: 4px 4px 10px 0px rgba(0, 0, 0, 0.15);
          box-shadow: 4px 4px 10px 0px rgba(0, 0, 0, 0.15);
  margin: 5% auto;
  text-align: center;
  width: 700px;
}

/* I used flexbox to line up all the items in the header as I wanted, this is widely used in CSS these days so great to get the hang of
https://css-tricks.com/snippets/css/a-guide-to-flexbox/
https://flexboxfroggy.com/ */
.device__header {
  margin-top: 0;
  text-align: center;
  display: flex;
  flex-direction: column;
  align-items: center;
}

.device__title {
  background-color: #000;
  color: #fff;
  margin: 0;
  padding: 10px 0;
  margin-bottom: 10px;
  width: 100%;
}

/* I restructured the HTML a little bit to put the title and select buttons inside a header block (kind of just personal preference) but I could have left it as you had 
it and just changed this class name to be device__body, device__section2 is a little misleading as there isn't a device__section1 and it doesn't tell us very
much about the content */
/* .device__section2 {
  padding: 20px;
} */

.device__standard-select {
  font-size: 1.1rem;
  font-weight: 100;
}

.device__select {
  margin: 10px 20px 30px;
}

.device__models {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: justify;
      -ms-flex-pack: justify;
          justify-content: space-between;
  margin: 20px;
}

.device__button {
  margin: 0 4% 4%;
}

.card {
  border: 1px solid black;
  -webkit-box-shadow: 4px 4px 10px 0px rgba(0, 0, 0, 0.15);
          box-shadow: 4px 4px 10px 0px rgba(0, 0, 0, 0.15);
  margin: auto 6px;
  position: relative;
  width: calc(20%);
}

.card__text {
  background: rgba(0, 0, 0, 0.6);
  color: #fff;
  font-size: 0.8rem;
  padding: 1px;
}

.card__text:hover {
  background-color: rgba(60, 179, 113, 0.8);
}

.card__text p {
  margin: 3px 1px;
}
/*# sourceMappingURL=style.css.map */